{"pageProps":{"source":{"compiledSource":"var l=Object.defineProperty,d=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var r=(a,n,t)=>n in a?l(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))p.call(n,t)&&r(a,t,n[t]);if(o)for(var t of o(n))i.call(n,t)&&r(a,t,n[t]);return a},c=(a,n)=>d(a,u(n));var m=(a,n)=>{var t={};for(var s in a)p.call(a,s)&&n.indexOf(s)<0&&(t[s]=a[s]);if(a!=null&&o)for(var s of o(a))n.indexOf(s)<0&&i.call(a,s)&&(t[s]=a[s]);return t};const makeShortcode=a=>function(t){return console.warn(\"Component \"+a+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},t))},Image=makeShortcode(\"Image\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var s=t,{components:a}=s,n=m(s,[\"components\"]);return mdx(MDXLayout,c(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(Image,{alt:\"Pre-canned food\",src:\"/images/cache-spm/cover.jpg\",width:320,height:480,layout:\"fixed\",priority:!0,mdxType:\"Image\"}),mdx(\"p\",null,\"Presentaiton version available \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://gera.cx/cache_spm.pdf\"}),\"here\"),\".\"),mdx(\"p\",null,\"If you are a Mobile Engineer like me, you\\u2019re likely extremely excited about Apple Silicon computers. They are performant and energy-efficient, but above all, they allow you to build your projects faster and without jet engine fan sounds. However, even with this improvement, the compilation times are very far from what you are getting in web development. Building locally, or on the CI, takes up momentum and can occasionally push you out of the flow, decreasing overall productivity.\"),mdx(\"p\",null,\"Luckily, there are a couple of improvements for build time.\"),mdx(\"h2\",e({},{id:\"why-build-the-same-things-over-and-over-again\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#why-build-the-same-things-over-and-over-again\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"Why build the same things over and over again?\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},`\\u201CInsanity is doing the same thing over and over and expecting different results.\\u201D\nAlbert Einstein`)),mdx(\"p\",null,\"If you process the same input, using the fixed process and configuration, you can usually expect the same output. This optimization idea is used in many places. The most basic would be caching: save the web page generated in the cache, to serve it again if requested a second time. This idea lays the foundation for something called hermetic build systems, like \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://bazel.build/basics/hermeticity\"}),\"Bazel\"),\". So when building the same source files with the same compiler, we should get the same binaries.\"),mdx(\"p\",null,\"I am not \",mdx(\"del\",{parentName:\"p\"},\"crazy\"),\"brave enough to move from the vendor build system. Let's see what is possible to achieve in the world of \",mdx(\"strong\",{parentName:\"p\"},\"Swift Package Manager\"),\" with the existing tools.\"),mdx(\"p\",null,\"Looking at the build logs and build timeline available in Xcode 14, I see that from the 10 minutes it takes to compile my project, around half of the time is spent building external dependencies. Taking into account that I don't change the versions of those dependencies that frequently, wouldn't it be great not to recompile them? One thing that is especially annoying here for me personally, is that Firebase rebuilds the protobuf library every time. Wait, I am sure I've seen this before. Where was it?\"),mdx(\"h3\",e({},{id:\"reinventing-carthage\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#reinventing-carthage\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"Reinventing Carthage\"),mdx(\"p\",null,\"Now I remember clearly. \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/Carthage/Carthage\"}),\"Carthage\"),\" allows this! Carthage is another package management tool that was created before SwiftPM. Carthage is building external dependencies and packaging them as binary XCFrameworks. Why not use it?\"),mdx(\"h3\",e({},{id:\"high-level-overview\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#high-level-overview\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"High-level overview\"),mdx(\"p\",null,\"We'll move from using external dependencies compiled by SPM at build time, to using pre-compiled versions of the same dependencies:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Define external dependencies in the Cartfile\"),mdx(\"li\",{parentName:\"ol\"},\"Build external dependencies to XCFramework\"),mdx(\"li\",{parentName:\"ol\"},\"Package all dependencies in your repo using git-lfs\"),mdx(\"li\",{parentName:\"ol\"},\"Add logic to unpack the dependencies if required\")),mdx(\"h3\",e({},{id:\"lets-get-building\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#lets-get-building\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"Let's get building\"),mdx(\"p\",null,\"The first step would be to define the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Cartfile\"),\", which is just a Carthage way of defining the list of dependencies.\"),mdx(\"p\",null,\"You can see the list of the packages your project relies on in the Project preferences pane, inside Xcode.\"),mdx(\"p\",null,\"You would end up with something like this in your \",mdx(\"inlineCode\",{parentName:\"p\"},\"Cartfile\"),\":\"),mdx(\"pre\",e({},{className:\"language-bash\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),\"github \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"https://github.com/Alamofire/Alamofire.git\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"5.4\"),`.1\ngithub `,mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"https://github.com/SwiftyJSON/SwiftyJSON.git\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"5.0\"),`.0\ngithub `,mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"https://github.com/vadymmarkov/Fakery\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"5.0\"),`.0\ngithub `,mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"https://github.com/SDWebImage/SDWebImage.git\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"5.8\"),`.2\n`)),mdx(\"p\",null,\"But wait, would this mean we will be using two different package managers?\"),mdx(\"p\",null,\"Yes, but wait to see the full picture, we will only need to use Carthage when we would need to change the libraries' versions.\"),mdx(\"h4\",e({},{id:\"install-and-run-carthage\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#install-and-run-carthage\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"Install and run Carthage\"),mdx(\"p\",null,\"Carthage can be installed from Homebrew, using \",mdx(\"inlineCode\",{parentName:\"p\"},\"brew install carthage\"),\".\"),mdx(\"p\",null,\"Then you'll need to run \",mdx(\"inlineCode\",{parentName:\"p\"},\"carthage bootstrap --use-xcframeworks --platform <Your platform, for exmaple iOS>\"),\". Carthage would then fetch your dependencies defined in \",mdx(\"inlineCode\",{parentName:\"p\"},\"Cartfile\"),\" and sub-dependencies. Then it would find binaries for them (if provided) or would compile them from sources. In the end, you would get all of them compiled into \",mdx(\"inlineCode\",{parentName:\"p\"},\"XCFramework\"),\" format.\"),mdx(\"h4\",e({},{id:\"expose-the-frameworks-to-swift-package-manager\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#expose-the-frameworks-to-swift-package-manager\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"Expose the frameworks to Swift Package Manager\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"XCFramework\"),\" is nice, but if you are using Swift Package Manager for local modules, you would need to carry out one additional step: create a package that will expose those dependencies. This is necessary, since you cannot declare a dependency on a bare framework in your file system: it has to be declared as a Swift Package Manager package.\"),mdx(\"p\",null,\"This can be achieved by defining one \",mdx(\"inlineCode\",{parentName:\"p\"},\"Package.swift\"),\" for all of the XCFrameworks:\"),mdx(\"pre\",e({},{className:\"language-swift\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-swift\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// swift-tools-version:5.3\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"PackageDescription\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" package \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"Package\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n    name`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Contrib\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    platforms`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"iOS\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"v11\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    products`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"library\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n            name`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Alamofire\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n            targets`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Alamofire\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    targets`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"binaryTarget\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n            name`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Alamofire\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n            path`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Alamofire.framework\"'),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`)),mdx(\"p\",null,\"In the end, we'll have following file structure:\"),mdx(\"pre\",e({},{className:\"language-bash\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`Root\n\\u251C\\u2500\\u2500 Cartfile\n\\u251C\\u2500\\u2500 Carthage\n\\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 Build\n\\u2502\\xA0\\xA0     \\u251C\\u2500\\u2500 Alamofire.xcframework\n\\u2502\\xA0\\xA0     \\u251C\\u2500\\u2500 Fakery.xcframework\n\\u2502\\xA0\\xA0     \\u251C\\u2500\\u2500 Package.swift\n\\u2502\\xA0\\xA0     \\u251C\\u2500\\u2500 SDWebImage.xcframework\n\\u2502\\xA0\\xA0     \\u2514\\u2500\\u2500 SwiftyJSON.xcframework\n\\u251C\\u2500\\u2500 MyProject.xcodeproj\n\\u251C\\u2500\\u2500 Sources\n\\u2514\\u2500\\u2500 setup.sh\n`)),mdx(\"h4\",e({},{id:\"package-and-store-the-binary-frameworks\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#package-and-store-the-binary-frameworks\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"Package and store the binary frameworks\"),mdx(\"p\",null,\"Carthage is going to put the frameworks to \",mdx(\"inlineCode\",{parentName:\"p\"},\"Carthage/Build\"),\". This is where we can take them and archive them. As an example, you can use the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://support.apple.com/en-gb/guide/terminal/apdc52250ee-4659-4751-9a3a-8b7988150530/mac\"}),\"tar\"),\" command:\"),mdx(\"pre\",e({},{className:\"language-bash\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"tar\"),` cvzf Contrib.tar.gz Carthage/Build\n`)),mdx(\"h4\",e({},{id:\"git-lfs\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#git-lfs\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"Git LFS\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://git-lfs.com\"}),\"Git LFS\"),\" is a Git extension intended to make it easier to keep large-ish files in Git. Certainly, it's possible to just add such files to Git normally, but it is not the best idea, as it would make your repo bigger and bigger the more versions of a given file you add.\"),mdx(\"p\",null,\"Installing and using Git LFS is extremely easy:\"),mdx(\"pre\",e({},{className:\"language-bash\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),\"brew \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"install\"),` git-lfs\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"git\"),\" lfs \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"install\"),`\n`)),mdx(\"p\",null,\"Then, let's add our archive to Git LFS:\"),mdx(\"pre\",e({},{className:\"language-bash\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"git\"),` lfs track Contrib.tar.gz\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"git\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"add\"),` .gitattributes\n`)),mdx(\"h4\",e({},{id:\"prepare-the-frameworks-for-use\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#prepare-the-frameworks-for-use\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"Prepare the frameworks for use\"),mdx(\"p\",null,\"We need to think of other engineers who would be interacting with the repository. It's a good idea to create a setup script that would make sure the Git LFS extension is installed and would pull the dependencies file. I will use tar as an example here again:\"),mdx(\"pre\",e({},{className:\"language-bash\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),\"brew \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"install\"),` git-lfs\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"git\"),\" lfs \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"install\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"git\"),` lfs pull\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"tar\"),` -xvf Contrib.tar.gz\n`)),mdx(\"h4\",e({},{id:\"referring-from-swift-package-manager\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#referring-from-swift-package-manager\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"Referring from Swift Package Manager\"),mdx(\"p\",null,\"Since we have \",mdx(\"inlineCode\",{parentName:\"p\"},\"Package.swift\"),\" now, we can refer from local Swift packages or Xcode projects to our binary frameworks. In your local package, it would look like this:\"),mdx(\"pre\",e({},{className:\"language-swift\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-swift\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// swift-tools-version:5.3\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"PackageDescription\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" package \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"Package\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n    name`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"CommonUI\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    platforms`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"iOS\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"v11\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    products`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    dependencies`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"package\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"path\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"../../Contrib\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    targets`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"target\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n            name`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"CommonUI\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n            dependencies`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n              `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"product\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"name\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"SDWebImage\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" package\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Contrib\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n            `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n            path`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Sources\"'),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`)),mdx(\"h3\",e({},{id:\"bottomline\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#bottomline\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"Bottomline\"),mdx(\"p\",null,\"As a result of this exercise, our team decreased the CI build and test time from 11 to 6 minutes. This has a significant effect on multiple verticals:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"A much faster feedback loop on the pull requests\"),mdx(\"li\",{parentName:\"ul\"},\"Saving money on the CI credit\"),mdx(\"li\",{parentName:\"ul\"},\"Less CO\",mdx(\"sub\",null,\"2\"),\", since we need to spin the CPU less\"),mdx(\"li\",{parentName:\"ul\"},\"Since it is faster to build the project locally, there is less chance for an engineer to lose focus\"),mdx(\"li\",{parentName:\"ul\"},\"Satisfaction from not rebuilding Firebase over and over: priceless\")),mdx(\"h2\",e({},{id:\"qa\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#qa\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"Q&A\"),mdx(\"h4\",e({},{id:\"qq-should-one-consider-switching-to-carthage-altogether\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#qq-should-one-consider-switching-to-carthage-altogether\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"QQ: Should one consider switching to Carthage altogether?\"),mdx(\"p\",null,\"In my opinion no, because Swift PM allows for modularization.\"),mdx(\"h4\",e({},{id:\"qq-why-use-xcframework-format-specifically\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#qq-why-use-xcframework-format-specifically\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"QQ: Why use XCFramework format, specifically?\"),mdx(\"p\",null,\"This format, in comparison to a regular \",mdx(\"inlineCode\",{parentName:\"p\"},\"framework\"),\", allows the packaging of several binaries of the same SDK for different architectures. In practice, this means Apple Silicon simulator support.\"),mdx(\"h4\",e({},{id:\"qq-any-additional-effect-from-this\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#qq-any-additional-effect-from-this\"}),mdx(\"span\",e({parentName:\"a\"},{className:\"icon icon-link\"}))),\"QQ: Any additional effect from this?\"),mdx(\"p\",null,\"One of the effects of this optimization is that the dependencies are now dynamic frameworks. This has pros and cons:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"If you have multiple targets, every target would be able to link to the frameworks without growing in size. Static frameworks would be included in every target multiplying the size.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Dynamic frameworks negatively affect your app's startup time. iOS takes some time to load dynamic libraries on the app startup.\"))))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Why do the same thing over and over? Part 1: External dependencies, Swift Package Manager","description":"Why recompile what you already compiled?","date":"2023-01-05","image":"/images/cache-spm/cover.jpg","published":true}},"frontMatter":{"title":"Why do the same thing over and over? Part 1: External dependencies, Swift Package Manager","description":"Why recompile what you already compiled?","date":"2023-01-05","image":"/images/cache-spm/cover.jpg","published":true}},"__N_SSG":true}