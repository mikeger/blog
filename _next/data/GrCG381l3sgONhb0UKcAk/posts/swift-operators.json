{"pageProps":{"source":{"compiledSource":"var l=Object.defineProperty,m=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var p=(e,o,a)=>o in e?l(e,o,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[o]=a,r=(e,o)=>{for(var a in o||(o={}))i.call(o,a)&&p(e,a,o[a]);if(n)for(var a of n(o))s.call(o,a)&&p(e,a,o[a]);return e},c=(e,o)=>m(e,d(o));var u=(e,o)=>{var a={};for(var t in e)i.call(e,t)&&o.indexOf(t)<0&&(a[t]=e[t]);if(e!=null&&n)for(var t of n(e))o.indexOf(t)<0&&s.call(e,t)&&(a[t]=e[t]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var t=a,{components:e}=t,o=u(t,[\"components\"]);return mdx(MDXLayout,c(r(r({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"In the Swift programming language, custom operators are symbols or characters that you can define and use to perform operations in your code. They can be used to make your code clearer and easier to read by representing complex operations in a more intuitive way.\"),mdx(\"p\",null,\"There are several good reasons why one would use custom operators in their Swift code:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Readability: an operator can help make your code more readable by representing complex operations in a more intuitive way. For example, you can define a custom operator to represent a mathematical operation such as the dot product of two vectors.\"),mdx(\"li\",{parentName:\"ul\"},\"Conciseness: they can help make your code more concise by replacing long, verbose expressions with a single operator. For example, you can define a custom operator to represent a general sequence of operations, such as filtering and allocating an array.\"),mdx(\"li\",{parentName:\"ul\"},`Consistency: also they can help you maintain consistency in your code by defining a default way to represent certain operations. This can help make your code easier to understand and maintain, especially if you are working on a large project with multiple contributors.\nTo define a custom operator in Swift, you use the operator keyword and specify the operator's symbol and its rank and associativity. You can then implement the operator as a function, similar to how you would define any other function in Swift.`)),mdx(\"p\",null,\"However, it is important to use them sparingly and only when they significantly improve the readability and maintainability of your code. Overuse of custom operators can make your code harder for other developers to understand.\"),mdx(\"p\",null,\"Here you can find my talk on this topic in a form of a \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://www.youtube.com/watch?v=Jt29O_Ukmgo\"}),\"video\"),\", you can also check \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://gera.cx/custom-swift-operators-the-good-the-bad-and-the-ugly.pdf\"}),\"slides\"),\" and a \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://gist.github.com/mikeger/e7c3d664dddd7322977c\"}),\"gist\"),\".\"),mdx(\"iframe\",r({},{width:200,height:113,src:\"https://www.youtube.com/embed/Jt29O_Ukmgo?feature=oembed\",frameBorder:\"0\",allow:\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\",allowFullScreen:!0,title:\"Mykhailo Gerasymenko: Swift custom operators (swift.berlin meetup #15)\"})))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Swift custom operators (2016)","description":"My talk and slides about the power of swift custom operators","date":"2016-03-01","image":"/images/swift.svg","published":true}},"frontMatter":{"title":"Swift custom operators (2016)","description":"My talk and slides about the power of swift custom operators","date":"2016-03-01","image":"/images/swift.svg","published":true}},"__N_SSG":true}